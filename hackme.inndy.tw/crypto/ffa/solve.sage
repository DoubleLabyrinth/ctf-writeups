#!/usr/bin/env sage

def ToLEBytes(n):
    result = bytearray()
    n = int(n)
    while n > 0:
        n, b = divmod(n, 256)
        result.append(b)
    return bytes(result[::-1])

x = 254732859357467931957861825273244795556693016657393159194417526480484204095858
y = 261877836792399836452074575192123520294695871579540257591169122727176542734080
z = 213932962252915797768584248464896200082707350140827098890648372492180142394587
m = 282832747915637398142431587525135167098126503327259369230840635687863475396299
p = 240670121804208978394996710730839069728700956824706945984819015371493837551238
q = 63385828825643452682833619835670889340533854879683013984056508942989973395315
M = 349579051431173103963525574908108980776346966102045838681986112083541754544269

assert(m.is_prime())
assert(M.is_prime())

A = MatrixSpace(GF(m), 3, 3)([[1, 3, 0], [0, 1, -5], [1, 0, 8]])
B = MatrixSpace(GF(m), 3, 1)([[x], [y], [z]])
X = A.inverse() * B

a, b, c = int(X[0, 0]), int(X[1, 0]), int(X[2, 0])
print('a = %d' % a)
print('b = %d' % b)
print('c = %d' % c)

phi_M = M - 1

g, i, j = xgcd(a, phi_M)
while a < 0:
    a += phi_M
assert(g == 1)

g, k, l = xgcd(b, phi_M)
while k < 0:
    k += phi_M
assert(g == 1)

flag1 = pow(p, i, M)
flag2 = pow(q, k, M)
assert(flag1 == flag2)

print(ToLEBytes(flag1))
